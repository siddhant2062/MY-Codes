//package _2_queue_using_ll;
//import java.util.*;
//public class Main {
//	public static Scanner scn=new Scanner(System.in);
//	public static class TreeNode{
//		int val=0;
//		TreeNode left=null;
//		TreeNode right=null;
//		TreeNode(int val){
//			this.val=val;
//		}
//	}
//	
//	public static ArrayList<Integer> leftView(TreeNode root){
//			if(root==null) {
//				return null;
//			}
//			ArrayList<Integer> ans=new ArrayList<>();
//			LinkedList<TreeNode> que=new LinkedList<>();
//			que.addLast(root);
//			while(que.size()!=0) {
//				int size=que.size();
//				ans.add(que.getFirst().val);
//				while(size-->0) {
//					TreeNode rn=que.removeFirst();
//					if(rn.left!=null) que.addLast(rn.left);
//					if(rn.right!=null) que.addLast(rn.right);
//				}
//			}
//			return ans;
//	}
//	public static TreeNode createTree(int arr[],int idx[]) {
//		if(idx[0]>arr.length||arr[idx[0]]==-1) {
//			idx[0]++;
//			return null;
//		}
//		TreeNode node=new TreeNode(arr[idx[0]])
//	}
//
//}
package _2_queue_using_ll;
import java.util.*;
class Main{
	static int lcs(String X,String Y,int m,int n,int[][] dp){
		 
	    if (m == 0 || n == 0)
	      return 0;
	 
	    if (dp[m][n] != -1)
	      return dp[m][n];
	 
	    if(X.charAt(m - 1) == Y.charAt(n - 1)){
	      dp[m][n] = 1 + lcs(X, Y, m - 1, n - 1, dp);
	      return dp[m][n];
	    }
	 
	    dp[m][n] = Math.max(lcs(X, Y, m, n - 1, dp),lcs(X, Y, m - 1, n, dp));
	    return dp[m][n];
	  }
	public static void main(String args[]) {
		Scanner s=new Scanner(System.in);
		int t=s.nextInt();
		while(t-->0) {
			String a=s.next();
			String b=s.next();
			int m = a.length();
		    int n = b.length();
		    int[][] dp = new int[m + 1][n + 1];
		    for(int i=0;i<m + 1;i++){
		      for(int j=0;j<n + 1;j++){
		        dp[i][j] = -1;
		      }
		    }
		    System.out.println("Length of LCS is "+lcs(a, b, m, n, dp));
		}
	}
}
